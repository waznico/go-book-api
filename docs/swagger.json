{
    "swagger": "2.0",
    "info": {
        "description": "It's a sample API to demostrate how it could be created with go. You can manage books with it.",
        "title": "Go Book API",
        "contact": {
            "name": "NiWA Dev"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/api/v1/",
    "paths": {
        "/book": {
            "post": {
                "description": "Adds a new book into database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Adds a new book",
                "parameters": [
                    {
                        "description": "Book object to insert into",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/book.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/book.Book"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/book/{id}": {
            "get": {
                "description": "Returns single book with given id in database if it exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get book with id [id]",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/book.Book"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "put": {
                "description": "Updates the book of the given id if it exists. Otherwise an error will be thrown.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Updates existing book",
                "parameters": [
                    {
                        "description": "Book object with updated props (could also only an object containing the updated props)",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/book.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated book",
                        "schema": {
                            "$ref": "#/definitions/book.Book"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "delete": {
                "description": "Deletes book with the given id if it exists in database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Deletes a book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/books": {
            "get": {
                "description": "Get all books stored in database",
                "produces": [
                    "application/json"
                ],
                "summary": "Get books stored in database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/book.Book"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "book.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}